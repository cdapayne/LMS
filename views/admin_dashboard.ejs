<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Admin Dashboard â€“ MD Technical School</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <link rel="icon" href="<%= branding?.favicon %>">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />

  <style>
    :root{
      --primary-color: dodgerblue;
      --secondary-color: orange;
      --bg: #f4f6f9;
      --surface: #ffffff;
      --border: #e5e7eb;
      --muted: #6b7280;
      --focus: rgba(30,144,255,.35);
    }
    * { box-sizing: border-box; }
    body{
      margin:0; background: var(--bg);
      font-family: "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
      color:#111827;
    }

    /* Hero */
    .hero{
      background:
        linear-gradient(180deg, rgba(30,144,255,.10), rgba(255,165,0,.06));
      border-bottom: 1px solid var(--border);
      padding: 1.25rem 0;
      margin-bottom: 1rem;
    }
    .hero h2{ margin:0; font-weight:800; font-size: clamp(1.1rem, 2.4vw, 1.5rem); }
    .hero .sub{ color: var(--muted); }

    /* Stat cards */
    .stat-card{
      background: var(--surface);
      border:1px solid var(--border);
      border-radius:14px;
      padding:1rem 1.25rem;
      box-shadow: 0 .6rem 1.2rem rgba(0,0,0,.06);
      height:100%;
    }
    .stat-value{ font-size: clamp(1.5rem, 3.5vw, 2.25rem); font-weight:800; line-height:1; }
    .stat-label{ color: var(--muted); margin-top:.35rem; }

    /* Quick actions */
    .qa{
      background: var(--surface);
      border:1px solid var(--border);
      border-radius:14px;
      box-shadow: 0 .6rem 1.2rem rgba(0,0,0,.05);
      padding:1rem;
    }
    .qa-title{
      display:flex; align-items:center; gap:10px; font-weight:800; margin-bottom:.75rem;
    }
    .qa-title::before{
      content:""; width:6px; height:18px; border-radius:3px; background: var(--secondary-color);
    }

    /* Action grid (mobile-first) */
       .qa-column h6{ font-weight:600; margin-bottom:.5rem; }


    /* Themed buttons */
    .btn-primary{ background: var(--primary-color) !important; border-color: var(--primary-color) !important; }
    .btn-primary:hover{ background:#1e6edb !important; border-color:#1e6edb !important; }
    .btn-outline-primary{ color: var(--primary-color) !important; border-color: var(--primary-color) !important; }
    .btn-outline-primary:hover{ background: var(--primary-color) !important; color:#fff !important; }
    .btn-link{ color: var(--primary-color) !important; }
    .btn-link:hover{ color: var(--secondary-color) !important; }

    /* Focus styles */
    .form-control:focus, .btn:focus{
      box-shadow: 0 0 0 .25rem var(--focus) !important;
      outline: none !important;
    }

    /* Reduce motion */
    @media (prefers-reduced-motion: reduce){
      *{ animation:none !important; transition:none !important; }
    }
    .chart-card{
      background: var(--surface);
      border:1px solid var(--border);
      border-radius:14px;
      padding:.5rem;
      box-shadow: 0 .6rem 1.2rem rgba(0,0,0,.06);
      height:350px;
      position:relative;
    }
 .chart-title{
      font-weight:600;
      text-align:center;
      margin:0 0 .5rem 0;
    }
    .chart-card .chart-container{ width:100%; height:calc(100% - 2rem); }    .chart-edit{ position:absolute; top:4px; right:4px; }
  </style>
</head>
<body>
  <%- include('header', { user: user }) %>

  <!-- Hero -->
  <div class="hero">
    <div class="container d-flex flex-wrap justify-content-between align-items-end gap-2">
      <div>
        <h2>Admin Dashboard</h2>
        <div class="sub">Welcome, <strong><%= user.name %></strong>.</div>
      </div>
    </div>
  </div>

  <div class="container pb-4">
    <!-- Stats -->
    <div class="row g-3 mb-4">
      <div class="col-12 col-sm-6 col-lg-4">
        <div class="stat-card" role="region" aria-label="Classes count">
          <div class="stat-value"><%= classes.length %></div>
          <div class="stat-label">Classes</div>
        </div>
      </div>
      <div class="col-12 col-sm-6 col-lg-4">
        <div class="stat-card" role="region" aria-label="Students count">
          <div class="stat-value"><%= students.length %></div>
          <div class="stat-label">Students</div>
        </div>
      </div>
        <div class="col-12 col-sm-6 col-lg-4">
        <div class="stat-card" role="region" aria-label="Teachers count">
          <div class="stat-value"><%= teachers.length %></div>
          <div class="stat-label">Teachers</div>
        </div>
      </div>
    </div>

  <!-- Quick Actions -->
    <section class="qa">
      <div class="qa-title">Quick Actions</div>
      <div class="row row-cols-1 row-cols-md-3 g-3">
        <div class="col qa-column">
          <h6>Students</h6>
          <div class="d-grid gap-2">
            <a class="btn btn-primary" href="/admin/students/pending">Pending Students</a>
            <a class="btn btn-outline-primary" href="/admin/students">Accepted Students</a>
            <a class="btn btn-outline-danger" href="/admin/denied">Denied Students</a>
            <a class="btn btn-outline-secondary" href="/admin/pre-registrations">Pre-Registered Users</a>
          </div>
        </div>
        <div class="col qa-column">
          <h6>Classes</h6>
          <div class="d-grid gap-2">
            <a class="btn btn-outline-primary" href="/admin/classes">All Classes</a>
            <a class="btn btn-success" href="/admin/classes/new">Create Class</a>
              <a class="btn btn-warning" href="/admin/teachers/new">Create Teacher</a>
            <a class="btn btn-warning" href="/admin/teachers">Teacher List</a>
          </div>
        </div>
        <div class="col qa-column">
          <h6>Other</h6>
          <div class="d-grid gap-2">
            <a class="btn btn-outline-secondary" href="/admin/jobs">Job Board</a>
            <a class="btn btn-outline-secondary" href="/admin/reports">Reports</a>
            <a class="btn btn-outline-secondary" href="/admin/events">Events Dashboard</a>
            <a class="btn btn-info" href="/admin/marketing">Marketing</a>
            <a class="btn btn-outline-secondary" href="/admin/create-event">Create Event</a>
            <a class="btn btn-outline-secondary" href="/admin/event-rsvps">Event RSVPs</a>
            <a class="btn btn-outline-secondary" href="/admin/email-templates">Email Templates</a>
            <a class="btn btn-outline-secondary" href="/admin/drip-campaigns">Drip Campaigns</a>
          </div>
        </div>
      </div>
    </section>
      <!-- Announcements -->
    <section class="qa mt-4">
      <div class="qa-title">Announcements</div>
      <form action="/admin/announcements" method="post" class="row g-2 mb-3">
        <div class="col-md-8">
          <input name="message" class="form-control" placeholder="New announcement" required>
        </div>
        <div class="col-md-3">
          <select name="audience" class="form-select">
            <option value="all">Everyone</option>
                  <option value="teachers">Teachers</option>
            <option value="students">Students</option>
          </select>
        </div>
        <div class="col-md-1">
          <button class="btn btn-primary w-100" type="submit">Post</button>
        </div>
      </form>
      <ul class="list-group">
        <% if ((announcements || []).length) { %>
          <% announcements.forEach(a => { %>
            <li class="list-group-item d-flex justify-content-between align-items-center">
              <span><%= a.message %></span>
              <small class="text-muted"><%= a.createdAt %></small>
            </li>
          <% }) %>
        <% } else { %>
          <li class="list-group-item text-muted">No announcements yet.</li>
        <% } %>
      </ul>
    </section>
    
 <!-- Charts -->
 <section class="qa mt-4">
      <div class="qa-title">Charts</div>
  <div class="row g-3 mt-4">
    <div class="col-12 col-md-6">
      <div class="chart-card">
              <div class="chart-title">Sign-ups (Bar Chart)</div>

        <div id="chart-signups-1" class="chart-container"></div>
      </div>
    </div>
    <div class="col-12 col-md-6">
      <div class="chart-card">
        <div class="chart-title">Sign-ups (Pie Chart)</div>
        <div id="chart-signups-2" class="chart-container"></div>
      </div>
    </div>
    <div class="col-12 col-md-6">
      <div class="chart-card">
               <div class="chart-title">Sign-ups (Horizontal Bar)</div>

        <div id="chart-signups-3" class="chart-container"></div>
      </div>
    </div>
    <div class="col-12 col-md-6">
      <div class="chart-card">
              <div class="chart-title">Sign-ups (Funnel Chart)</div>

        <div id="chart-signups-4" class="chart-container"></div>
      </div>
    </div>
  </div>
   </section>
  </div>

<!-- Chart edit modal -->
<div class="modal fade" id="chartModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-dialog-scrollable">
    <div class="modal-content">
      <form id="chartForm">
        <div class="modal-header">
          <h5 class="modal-title">Configure Chart</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <input type="hidden" id="chartId">
          <div class="mb-3">
            <label class="form-label">Chart Type</label>
            <select id="chartType" class="form-select">
              <option value="line">Line</option>
              <option value="pie">Pie</option>
              <option value="bar">Bar</option>
              <option value="realtime">Real-time Sorting</option>
              <option value="cylinder3d">3D Cylinder</option>
              <option value="pie3d">3D Pie</option>
              <option value="map">Map</option>
              <option value="pictorial">Pictorial</option>
            </select>
          </div>
          <div class="mb-3">
            <label class="form-label">Table</label>
            <select id="dataTable" class="form-select"></select>
          </div>
          <div id="fieldSelectors">
            <div class="mb-3">
              <label class="form-label">Category Field</label>
              <select id="categoryField" class="form-select"></select>
            </div>
            <div class="mb-3">
              <label class="form-label">Value Field</label>
              <select id="valueField" class="form-select"></select>
            </div>
          </div>
          <div id="mapSelectors" class="d-none">
            <div class="mb-3">
              <label class="form-label">Latitude Field</label>
              <select id="latField" class="form-select"></select>
            </div>
            <div class="mb-3">
              <label class="form-label">Longitude Field</label>
              <select id="lonField" class="form-select"></select>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button class="btn btn-secondary" type="button" data-bs-dismiss="modal">Cancel</button>
          <button class="btn btn-primary" type="submit">Save</button>
        </div>
      </form>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.amcharts.com/lib/5/index.js"></script>
<script src="https://cdn.amcharts.com/lib/5/xy.js"></script>
<script src="https://cdn.amcharts.com/lib/5/percent.js"></script>
<script src="https://cdn.amcharts.com/lib/5/map.js"></script>
<script src="https://cdn.amcharts.com/lib/5/geodata/worldLow.js"></script>
<script src="https://cdn.amcharts.com/lib/5/themes/Animated.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    const signupSelects = document.querySelectorAll('.signupRange'); //this needs to be changed per chart
      const signupSelects2 = document.querySelectorAll('.signupRange'); //this needs to be changed per chart
        const signupSelects3 = document.querySelectorAll('.signupRange'); //this needs to be changed per chart
          const signupSelects4 = document.querySelectorAll('.signupRange'); //this needs to be changed per chart
  const signupRoots = {};

async function renderSignupPieChart(id, range) {
  const res = await fetch('/admin/chart/Newsignups');
  const raw = await res.json();
  const rows = Array.isArray(raw.series) ? raw.series : raw;

  // Prepare data for a category-based column chart
  const barData = rows
    .map(d => ({ label: d.date, value: Number(d.count || 0) }))
    .filter(d => d.value > 0);

  // Dispose existing root (if any)
  if (signupRoots[id]) signupRoots[id].dispose();

  // Init
  const root = am5.Root.new(id);
  signupRoots[id] = root;
root.setThemes([
  am5themes_Animated.new(root),
 ColorfulUnifiedTheme(root, { dark: true }) // optionally: ColorfulUnifiedTheme(root, { dark: true })
]);
  // Base chart
  const chart = root.container.children.push(
    am5xy.XYChart.new(root, {
      layout: root.verticalLayout,
      panX: true,
      panY: false,
      wheelX: 'panX',
      wheelY: 'zoomX'
    })
  );

  // Axes
  const xAxis = chart.xAxes.push(
    am5xy.CategoryAxis.new(root, {
      categoryField: 'label',
      renderer: am5xy.AxisRendererX.new(root, { minGridDistance: 30 }),
      tooltip: am5.Tooltip.new(root, {})
    })
  );
  xAxis.data.setAll(barData);

  const yAxis = chart.yAxes.push(
    am5xy.ValueAxis.new(root, {
      renderer: am5xy.AxisRendererY.new(root, {})
    })
  );

  // Series (bar/column)
  const series = chart.series.push(
    am5xy.ColumnSeries.new(root, {
      name: 'Sign-ups per day',
      xAxis,
      yAxis,
      categoryXField: 'label',
      valueYField: 'value',
      tooltip: am5.Tooltip.new(root, { labelText: '{categoryX}: {valueY}' })
    })
  );

  // Column styling
  series.columns.template.setAll({
    cornerRadiusTL: 4,
    cornerRadiusTR: 4,
    strokeOpacity: 0
  });

  

  // Data
  series.data.setAll(barData);


  // Optional: labels on bars
  // series.bullets.push(() =>
  //   am5.Bullet.new(root, {
  //     locationY: 1,
  //     sprite: am5.Label.new(root, {
  //       text: '{valueY}',
  //       centerY: am5.p50,
  //       centerX: am5.p50,
  //       populateText: true
  //     })
  //   })
  // );

  // Interactions
  chart.set('cursor', am5xy.XYCursor.new(root, { xAxis }));
  chart.set('scrollbarX', am5.Scrollbar.new(root, { orientation: 'horizontal' }));

  // Optional: legend (useful if you add more series later)
  // const legend = chart.children.push(
  //   am5.Legend.new(root, { centerX: am5.percent(50), x: am5.percent(50) })
  // );
  // legend.data.setAll(chart.series.values);
}

  async function renderSignupPieChart2(id, range) {
    const res = await fetch('/admin/chart/Newsignups');
    const raw = await res.json();
    const rows = Array.isArray(raw.series) ? raw.series : raw;
    const pieData = rows
      .map(d => ({ label: d.date, value: Number(d.count || 0) }))
      .filter(d => d.value > 0);

    if (signupRoots[id]) signupRoots[id].dispose();
    const root = am5.Root.new(id);
    signupRoots[id] = root;
    root.setThemes([am5themes_Animated.new(root)]);

    const chart = root.container.children.push(
      am5percent.PieChart.new(root, { layout: root.verticalLayout, innerRadius: am5.percent(50) })
    );

    const series = chart.series.push(
      am5percent.PieSeries.new(root, { name: 'Sign-ups per day', categoryField: 'label', valueField: 'value', alignLabels: true })
    );

    series.slices.template.setAll({
      tooltipText: '{category}: {value} ({valuePercentTotal.formatNumber("0.0")}%)'
    });
    series.labels.template.setAll({ text: '{category}\n{value}' });

    series.data.setAll(pieData);

    // const legend = chart.children.push(
    //   am5.Legend.new(root, { centerX: am5.percent(50), x: am5.percent(50), layout: root.verticalLayout })
    // );
    // legend.data.setAll(series.dataItems);
  }

async function renderSignupPieChart3(id, range) {
  const res = await fetch('/admin/chart/Newsignups');
  const raw = await res.json();
  const rows = Array.isArray(raw.series) ? raw.series : raw;

  // Build + sort (desc by value)
  const barData = rows
    .map(d => ({ label: d.date, value: Number(d.count || 0) }))
    .filter(d => d.value > 0)
    .sort((a, b) => b.value - a.value || a.label.localeCompare(b.label));

  // Dispose old root
  if (signupRoots[id]) signupRoots[id].dispose();

  // Init
  const root = am5.Root.new(id);
  signupRoots[id] = root;
  root.setThemes([am5themes_Animated.new(root)]);

  // Base chart
  const chart = root.container.children.push(
    am5xy.XYChart.new(root, {
      layout: root.verticalLayout,
      panX: false,
      panY: true,
      wheelX: 'none',
      wheelY: 'zoomY'
    })
  );

  // Axes: horizontal values, vertical categories (for horizontal bars)
  const xAxis = chart.xAxes.push(
    am5xy.ValueAxis.new(root, {
      renderer: am5xy.AxisRendererX.new(root, { minGridDistance: 40 })
    })
  );

  const yAxis = chart.yAxes.push(
    am5xy.CategoryAxis.new(root, {
      categoryField: 'label',
      renderer: am5xy.AxisRendererY.new(root, {
        minGridDistance: 20,
        // Keep highest at the top because data is already sorted desc
        inversed: true
      })
    })
  );
  yAxis.data.setAll(barData);

  // Series (horizontal bars)
  const series = chart.series.push(
    am5xy.ColumnSeries.new(root, {
      name: 'Sign-ups per day',
      xAxis,
      yAxis,
      valueXField: 'value',
      categoryYField: 'label',
      tooltip: am5.Tooltip.new(root, { labelText: '{categoryY}: {valueX}' })
    })
  );

  // Bar styling
  series.columns.template.setAll({
    height: am5.p100,
    strokeOpacity: 0,
    cornerRadiusTR: 4,
    cornerRadiusBR: 4
  });

  // Labels at the end of bars (optional)
  // series.bullets.push(() =>
  //   am5.Bullet.new(root, {
  //     locationX: 1,
  //     sprite: am5.Label.new(root, {
  //       text: '{valueX}',
  //       centerY: am5.p50,
  //       populateText: true
  //     })
  //   })
  // );

  // Data
  series.data.setAll(barData);

  // Interactions
  chart.set('cursor', am5xy.XYCursor.new(root, { yAxis }));
  chart.set('scrollbarY', am5.Scrollbar.new(root, { orientation: 'vertical' }));

  // Appear animation
  series.appear(600);
  chart.appear(600, 80);
}

async function renderSignupPieChart4(id, range) {
  const res = await fetch('/admin/chart/Newsignups');
  const raw = await res.json();
  const rows = Array.isArray(raw.series) ? raw.series : raw;

  // Prepare + sort (largest at the top is typical for funnels)
  const funnelData = rows
    .map(d => ({ label: d.date, value: Number(d.count || 0) }))
    .filter(d => d.value > 0)
    .sort((a, b) => b.value - a.value || a.label.localeCompare(b.label));

  // Dispose any existing chart
  if (signupRoots[id]) signupRoots[id].dispose();

  // Init
  const root = am5.Root.new(id);
  signupRoots[id] = root;
  root.setThemes([am5themes_Animated.new(root)]);

  // Base Sliced chart (container for funnel / pyramid series)
  const chart = root.container.children.push(
    am5percent.SlicedChart.new(root, {
      layout: root.verticalLayout
    })
  );

  // Funnel series
  const series = chart.series.push(
    am5percent.FunnelSeries.new(root, {
      name: 'Sign-ups per day',
      valueField: 'value',
      categoryField: 'label',
      orientation: 'vertical', // change to 'horizontal' if you prefer
      // Optional: make steps visually more separated
      bottomRatio: 1, // 1 = classic straight sides; <1 narrows the bottom more
    })
  );

  // Labels & tooltips
  series.slices.template.setAll({
    tooltipText: '{category}: {value} ({valuePercentTotal.formatNumber("0.0")}%)'
  });
  series.labels.template.setAll({
    text: '{category}\n{value}',
    centerX: am5.p50,
    populateText: true
  });

  // Data
  series.data.setAll(funnelData);

  // Legend
  // const legend = chart.children.push(
  //   am5.Legend.new(root, {
  //     centerX: am5.percent(50),
  //     x: am5.percent(50),
  //     layout: root.verticalLayout
  //   })
  // );
  // legend.data.setAll(series.dataItems);

  // Appear animation
  series.appear(700, 80);
  chart.appear(700, 80);
}

function ColorfulUnifiedTheme(root, opts = {}) {
  const paletteHex = opts.palette || [
    0xFF6B6B, 0xFFD93D, 0x6BCB77, 0x4D96FF, 0x9D4EDD,
    0xFF8FAB, 0xFFA62B, 0x2EC4B6, 0x00BBF9, 0x845EC2,
    0xFFC75F, 0xF9F871, 0xFF9671, 0x2B9EB3, 0x6A2C70,
    0xE83F6F, 0x17C3B2, 0xB8DE6F
  ];
  const dark = !!opts.dark;

  const palette = paletteHex.map(c => am5.color(c));

  return am5.Theme.new(root, {
    setup(root) {
      // Global palette: used by series, slices, bullets, etc.
      root.rule('ColorSet').setAll({
        colors: palette,
        reuse: true,
        step: 1
      });

      // Interface colors (subtle grid & readable text)
      root.interfaceColors.set('grid', am5.color(dark ? 0x3a3f47 : 0xE5E7EB));
      if (dark) root.interfaceColors.set('text', am5.color(0xffffff));

      // Axis labels & general labels a bit bolder
      root.rule('AxisLabel').setAll({ fontWeight: '600' });
      root.rule('Label').setAll({ fontWeight: 500 });

      // Softer grid lines
      root.rule('Grid').setAll({ strokeOpacity: 0.08 });

      // Tooltips: slightly stronger background for readability
      root.rule('Tooltip').setAll({
        getFillFromSprite: false,
        background: am5.Rectangle.new(root, { fillOpacity: 0.95 })
      });

      // Columns: rounded top corners, light stroke
      // (Only affects column-type series; safe for other charts)
      root.rule('Column').setAll({
        cornerRadiusTL: 6,
        cornerRadiusTR: 6,
        strokeOpacity: 0.15
      });

      // Pies: keep labels aligned by default (non-breaking)
      root.rule('PieSeries').setAll({ alignLabels: true });
    }
  });
}

 
    const chartId = `chart-signups-1`;
    //select.addEventListener('change', () => renderSignupPieChart(chartId, select.value));
    renderSignupPieChart(chartId, 'week');

    document.getElementById(chartId).addEventListener('click', async () => {
      const res = await fetch('/admin/chart/Newsignups');
      const raw = await res.json();
      const data = (Array.isArray(raw.series) ? raw.series : raw).map(d => ({
        ts: new Date(d.date + 'T00:00:00Z').getTime(),
        count: Number(d.count || 0),
        dateStr: d.date
      }));
      let popupRoot;
      Swal.fire({
        title: 'Pre-Registrations Per Day',
        html: '<div id="signupChartPopup" style="width:100%;height:400px;"></div>',
        width: '90%',
        didOpen: () => {
          popupRoot = am5.Root.new('signupChartPopup');
          popupRoot.setThemes([am5themes_Animated.new(popupRoot)]);
          const chart = popupRoot.container.children.push(am5xy.XYChart.new(popupRoot, {
            layout: popupRoot.verticalLayout,
            panX: true, panY: false, wheelX: 'panX', wheelY: 'zoomX'
          }));
          const xAxis = chart.xAxes.push(am5xy.DateAxis.new(popupRoot, {
            baseInterval: { timeUnit: 'day', count: 1 },
            renderer: am5xy.AxisRendererX.new(popupRoot, { minGridDistance: 40 }),
            tooltip: am5.Tooltip.new(popupRoot, {})
          }));
          const yAxis = chart.yAxes.push(am5xy.ValueAxis.new(popupRoot, {
            renderer: am5xy.AxisRendererY.new(popupRoot, {})
          }));
          const series = chart.series.push(am5xy.LineSeries.new(popupRoot, {
            name: 'Sign-ups',
            xAxis, yAxis,
            valueXField: 'ts',
            valueYField: 'count',
            tooltip: am5.Tooltip.new(popupRoot, { labelText: '{valueY}' })
          }));
          series.strokes.template.setAll({ strokeWidth: 2 });
          chart.set('cursor', am5xy.XYCursor.new(popupRoot, { xAxis }));
          chart.set('scrollbarX', am5.Scrollbar.new(popupRoot, { orientation: 'horizontal' }));
          series.data.setAll(data);
          if (data.length) {
            xAxis.zoomToValues(data[0].ts, data[data.length - 1].ts);
          }
        },
        willClose: () => { if (popupRoot) popupRoot.dispose(); }
      });
    });


      const chartId2 = `chart-signups-2`;
   // select.addEventListener('change', () => renderSignupPieChart(chartId2, select.value));
    renderSignupPieChart2(chartId2, 'week');

    document.getElementById(chartId2).addEventListener('click', async () => {
      const res = await fetch('/admin/chart/Newsignups');
      const raw = await res.json();
      const data = (Array.isArray(raw.series) ? raw.series : raw).map(d => ({
        ts: new Date(d.date + 'T00:00:00Z').getTime(),
        count: Number(d.count || 0),
        dateStr: d.date
      }));
      let popupRoot;
      Swal.fire({
        title: 'Pre-Registrations Per Day',
        html: '<div id="signupChartPopup" style="width:100%;height:400px;"></div>',
        width: '90%',
        didOpen: () => {
          popupRoot = am5.Root.new('signupChartPopup');
          popupRoot.setThemes([am5themes_Animated.new(popupRoot)]);
          const chart = popupRoot.container.children.push(am5xy.XYChart.new(popupRoot, {
            layout: popupRoot.verticalLayout,
            panX: true, panY: false, wheelX: 'panX', wheelY: 'zoomX'
          }));
          const xAxis = chart.xAxes.push(am5xy.DateAxis.new(popupRoot, {
            baseInterval: { timeUnit: 'day', count: 1 },
            renderer: am5xy.AxisRendererX.new(popupRoot, { minGridDistance: 40 }),
            tooltip: am5.Tooltip.new(popupRoot, {})
          }));
          const yAxis = chart.yAxes.push(am5xy.ValueAxis.new(popupRoot, {
            renderer: am5xy.AxisRendererY.new(popupRoot, {})
          }));
          const series = chart.series.push(am5xy.LineSeries.new(popupRoot, {
            name: 'Sign-ups',
            xAxis, yAxis,
            valueXField: 'ts',
            valueYField: 'count',
            tooltip: am5.Tooltip.new(popupRoot, { labelText: '{valueY}' })
          }));
          series.strokes.template.setAll({ strokeWidth: 2 });
          chart.set('cursor', am5xy.XYCursor.new(popupRoot, { xAxis }));
          chart.set('scrollbarX', am5.Scrollbar.new(popupRoot, { orientation: 'horizontal' }));
          series.data.setAll(data);
          if (data.length) {
            xAxis.zoomToValues(data[0].ts, data[data.length - 1].ts);
          }
        },
        willClose: () => { if (popupRoot) popupRoot.dispose(); }
      });
    });

        const chartId3 = `chart-signups-3`;
   // select.addEventListener('change', () => renderSignupPieChart(chartId2, select.value));
    renderSignupPieChart3(chartId3, 'week');

    document.getElementById(chartId3).addEventListener('click', async () => {
      const res = await fetch('/admin/chart/Newsignups');
      const raw = await res.json();
      const data = (Array.isArray(raw.series) ? raw.series : raw).map(d => ({
        ts: new Date(d.date + 'T00:00:00Z').getTime(),
        count: Number(d.count || 0),
        dateStr: d.date
      }));
      let popupRoot;
      Swal.fire({
        title: 'Pre-Registrations Per Day',
        html: '<div id="signupChartPopup" style="width:100%;height:400px;"></div>',
        width: '90%',
        didOpen: () => {
          popupRoot = am5.Root.new('signupChartPopup');
          popupRoot.setThemes([am5themes_Animated.new(popupRoot)]);
          const chart = popupRoot.container.children.push(am5xy.XYChart.new(popupRoot, {
            layout: popupRoot.verticalLayout,
            panX: true, panY: false, wheelX: 'panX', wheelY: 'zoomX'
          }));
          const xAxis = chart.xAxes.push(am5xy.DateAxis.new(popupRoot, {
            baseInterval: { timeUnit: 'day', count: 1 },
            renderer: am5xy.AxisRendererX.new(popupRoot, { minGridDistance: 40 }),
            tooltip: am5.Tooltip.new(popupRoot, {})
          }));
          const yAxis = chart.yAxes.push(am5xy.ValueAxis.new(popupRoot, {
            renderer: am5xy.AxisRendererY.new(popupRoot, {})
          }));
          const series = chart.series.push(am5xy.LineSeries.new(popupRoot, {
            name: 'Sign-ups',
            xAxis, yAxis,
            valueXField: 'ts',
            valueYField: 'count',
            tooltip: am5.Tooltip.new(popupRoot, { labelText: '{valueY}' })
          }));
          series.strokes.template.setAll({ strokeWidth: 2 });
          chart.set('cursor', am5xy.XYCursor.new(popupRoot, { xAxis }));
          chart.set('scrollbarX', am5.Scrollbar.new(popupRoot, { orientation: 'horizontal' }));
          series.data.setAll(data);
          if (data.length) {
            xAxis.zoomToValues(data[0].ts, data[data.length - 1].ts);
          }
        },
        willClose: () => { if (popupRoot) popupRoot.dispose(); }
      });
    });

         const chartId4 = `chart-signups-4`;
   // select.addEventListener('change', () => renderSignupPieChart(chartId2, select.value));
    renderSignupPieChart4(chartId4, 'week');

    document.getElementById(chartId4).addEventListener('click', async () => {
      const res = await fetch('/admin/chart/Newsignups');
      const raw = await res.json();
      const data = (Array.isArray(raw.series) ? raw.series : raw).map(d => ({
        ts: new Date(d.date + 'T00:00:00Z').getTime(),
        count: Number(d.count || 0),
        dateStr: d.date
      }));
      let popupRoot;
      Swal.fire({
        title: 'Pre-Registrations Per Day',
        html: '<div id="signupChartPopup" style="width:100%;height:400px;"></div>',
        width: '90%',
        didOpen: () => {
          popupRoot = am5.Root.new('signupChartPopup');
          popupRoot.setThemes([am5themes_Animated.new(popupRoot)]);
          const chart = popupRoot.container.children.push(am5xy.XYChart.new(popupRoot, {
            layout: popupRoot.verticalLayout,
            panX: true, panY: false, wheelX: 'panX', wheelY: 'zoomX'
          }));
          const xAxis = chart.xAxes.push(am5xy.DateAxis.new(popupRoot, {
            baseInterval: { timeUnit: 'day', count: 1 },
            renderer: am5xy.AxisRendererX.new(popupRoot, { minGridDistance: 40 }),
            tooltip: am5.Tooltip.new(popupRoot, {})
          }));
          const yAxis = chart.yAxes.push(am5xy.ValueAxis.new(popupRoot, {
            renderer: am5xy.AxisRendererY.new(popupRoot, {})
          }));
          const series = chart.series.push(am5xy.LineSeries.new(popupRoot, {
            name: 'Sign-ups',
            xAxis, yAxis,
            valueXField: 'ts',
            valueYField: 'count',
            tooltip: am5.Tooltip.new(popupRoot, { labelText: '{valueY}' })
          }));
          series.strokes.template.setAll({ strokeWidth: 2 });
          chart.set('cursor', am5xy.XYCursor.new(popupRoot, { xAxis }));
          chart.set('scrollbarX', am5.Scrollbar.new(popupRoot, { orientation: 'horizontal' }));
          series.data.setAll(data);
          if (data.length) {
            xAxis.zoomToValues(data[0].ts, data[data.length - 1].ts);
          }
        },
        willClose: () => { if (popupRoot) popupRoot.dispose(); }
      });
    });


 </script>
 </body>
 </html>
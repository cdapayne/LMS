<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Admin Dashboard â€“ MD Technical School</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <link rel="icon" href="<%= branding?.favicon %>">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />

  <style>
    :root{
      --primary-color: dodgerblue;
      --secondary-color: orange;
      --bg: #f4f6f9;
      --surface: #ffffff;
      --border: #e5e7eb;
      --muted: #6b7280;
      --focus: rgba(30,144,255,.35);
    }
    * { box-sizing: border-box; }
    body{
      margin:0; background: var(--bg);
      font-family: "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
      color:#111827;
    }

    /* Hero */
    .hero{
      background:
        linear-gradient(180deg, rgba(30,144,255,.10), rgba(255,165,0,.06));
      border-bottom: 1px solid var(--border);
      padding: 1.25rem 0;
      margin-bottom: 1rem;
    }
    .hero h2{ margin:0; font-weight:800; font-size: clamp(1.1rem, 2.4vw, 1.5rem); }
    .hero .sub{ color: var(--muted); }

    /* Stat cards */
    .stat-card{
      background: var(--surface);
      border:1px solid var(--border);
      border-radius:14px;
      padding:1rem 1.25rem;
      box-shadow: 0 .6rem 1.2rem rgba(0,0,0,.06);
      height:100%;
    }
    .stat-value{ font-size: clamp(1.5rem, 3.5vw, 2.25rem); font-weight:800; line-height:1; }
    .stat-label{ color: var(--muted); margin-top:.35rem; }

    /* Quick actions */
    .qa{
      background: var(--surface);
      border:1px solid var(--border);
      border-radius:14px;
      box-shadow: 0 .6rem 1.2rem rgba(0,0,0,.05);
      padding:1rem;
    }
    .qa-title{
      display:flex; align-items:center; gap:10px; font-weight:800; margin-bottom:.75rem;
    }
    .qa-title::before{
      content:""; width:6px; height:18px; border-radius:3px; background: var(--secondary-color);
    }

    /* Action grid (mobile-first) */
    .action-grid{
      display:grid;
      grid-template-columns: 1fr 1fr;
      gap:.5rem;
    }
    @media (min-width: 576px){
            .action-grid{ grid-template-columns: repeat(3, 1fr); }
    }
    @media (min-width: 992px){
      .action-grid{ grid-template-columns: repeat(4, 1fr); }
    }
    .action-grid .btn{ width:100%; }

    /* Themed buttons */
    .btn-primary{ background: var(--primary-color) !important; border-color: var(--primary-color) !important; }
    .btn-primary:hover{ background:#1e6edb !important; border-color:#1e6edb !important; }
    .btn-outline-primary{ color: var(--primary-color) !important; border-color: var(--primary-color) !important; }
    .btn-outline-primary:hover{ background: var(--primary-color) !important; color:#fff !important; }
    .btn-link{ color: var(--primary-color) !important; }
    .btn-link:hover{ color: var(--secondary-color) !important; }

    /* Focus styles */
    .form-control:focus, .btn:focus{
      box-shadow: 0 0 0 .25rem var(--focus) !important;
      outline: none !important;
    }

    /* Reduce motion */
    @media (prefers-reduced-motion: reduce){
      *{ animation:none !important; transition:none !important; }
    }
    .chart-card{
      background: var(--surface);
      border:1px solid var(--border);
      border-radius:14px;
      padding:.5rem;
      box-shadow: 0 .6rem 1.2rem rgba(0,0,0,.06);
      height:250px;
      position:relative;
    }
    .chart-card .chart-container{ width:100%; height:100%; }
    .chart-edit{ position:absolute; top:4px; right:4px; }
  </style>
</head>
<body>
  <%- include('header', { user: user }) %>

  <!-- Hero -->
  <div class="hero">
    <div class="container d-flex flex-wrap justify-content-between align-items-end gap-2">
      <div>
        <h2>Admin Dashboard</h2>
        <div class="sub">Welcome, <strong><%= user.name %></strong>.</div>
      </div>
    </div>
  </div>

  <div class="container pb-4">
    <!-- Stats -->
    <div class="row g-3 mb-4">
      <div class="col-12 col-sm-6 col-lg-4">
        <div class="stat-card" role="region" aria-label="Classes count">
          <div class="stat-value"><%= classes.length %></div>
          <div class="stat-label">Classes</div>
        </div>
      </div>
      <div class="col-12 col-sm-6 col-lg-4">
        <div class="stat-card" role="region" aria-label="Students count">
          <div class="stat-value"><%= students.length %></div>
          <div class="stat-label">Students</div>
        </div>
      </div>
    </div>

    <!-- Quick Actions -->
    <section class="qa">
      <div class="qa-title">Quick Actions</div>
      <div class="action-grid">
        <!-- Students -->
        <a class="btn btn-primary" href="/admin/students/pending">Pending Students</a>
        <a class="btn btn-outline-primary" href="/admin/students">Accepted Students</a>
        <a class="btn btn-outline-danger" href="/admin/denied">Denied Students</a>
          <a class="btn btn-outline-secondary" href="/admin/pre-registrations">Pre-Registered Users</a>

        <!-- Classes -->
        <a class="btn btn-outline-primary" href="/admin/classes">All Classes</a>
        <a class="btn btn-success" href="/admin/classes/new">Create Class</a>

        <!-- Teachers -->
        <a class="btn btn-warning" href="/admin/teachers/new">Create Teacher</a>
        <a class="btn btn-warning" href="/admin/teachers">Teacher List</a>

        <!-- Reports / Events -->
        <a class="btn btn-outline-secondary" href="/admin/reports">Reports</a>
        <a class="btn btn-outline-secondary" href="/admin/events">Events Dashboard</a>
                <a class="btn btn-info" href="/admin/marketing">Marketing</a>
    <a class="btn btn-outline-secondary" href="/admin/create-event">Create Event</a>
        <a class="btn btn-outline-secondary" href="/admin/event-rsvps">Event RSVPs</a>
      </div>
    </section>
      <!-- Announcements -->
    <section class="qa mt-4">
      <div class="qa-title">Announcements</div>
      <form action="/admin/announcements" method="post" class="row g-2 mb-3">
        <div class="col-md-8">
          <input name="message" class="form-control" placeholder="New announcement" required>
        </div>
        <div class="col-md-3">
          <select name="audience" class="form-select">
            <option value="all">Everyone</option>
                  <option value="teachers">Teachers</option>
            <option value="students">Students</option>
          </select>
        </div>
        <div class="col-md-1">
          <button class="btn btn-primary w-100" type="submit">Post</button>
        </div>
      </form>
      <ul class="list-group">
        <% if ((announcements || []).length) { %>
          <% announcements.forEach(a => { %>
            <li class="list-group-item d-flex justify-content-between align-items-center">
              <span><%= a.message %></span>
              <small class="text-muted"><%= a.createdAt %></small>
            </li>
          <% }) %>
        <% } else { %>
          <li class="list-group-item text-muted">No announcements yet.</li>
        <% } %>
      </ul>
    </section>
    
 <!-- Charts -->

  <div class="row g-3 mt-4">
    <div class="col-12 col-md-6">
      <div class="chart-card">
          <div class="d-flex justify-content-end mb-1">
          <select id="signupRange" class="form-select form-select-sm w-auto">
            <option value="week">Past Week</option>
            <option value="month">Past Month</option>
            <option value="year">Past Year</option>
          </select>
        </div>
        <div id="chart-signups" class="chart-container"></div>
      </div>
    </div>
    <div class="col-12 col-md-6">
      <div class="chart-card">
       <div id="chart-signups2" class="chart-container"></div>
      </div>
    </div>
    <div class="col-12 col-md-6">
      <div class="chart-card">
        <button class="chart-edit btn btn-sm btn-link" type="button">Edit</button>
        <div id="chart-pending" class="chart-container"></div>
      </div>
    </div>
    <div class="col-12 col-md-6">
      <div class="chart-card">
        <button class="chart-edit btn btn-sm btn-link" type="button">Edit</button>
        <div id="chart-approved" class="chart-container"></div>
      </div>
    </div>
  </div>
  </div>

<!-- Chart edit modal -->
<div class="modal fade" id="chartModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-dialog-scrollable">
    <div class="modal-content">
      <form id="chartForm">
        <div class="modal-header">
          <h5 class="modal-title">Configure Chart</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <input type="hidden" id="chartId">
          <div class="mb-3">
            <label class="form-label">Chart Type</label>
            <select id="chartType" class="form-select">
              <option value="line">Line</option>
              <option value="pie">Pie</option>
              <option value="bar">Bar</option>
              <option value="realtime">Real-time Sorting</option>
              <option value="cylinder3d">3D Cylinder</option>
              <option value="pie3d">3D Pie</option>
              <option value="map">Map</option>
              <option value="pictorial">Pictorial</option>
            </select>
          </div>
          <div class="mb-3">
            <label class="form-label">Table</label>
            <select id="dataTable" class="form-select"></select>
          </div>
          <div id="fieldSelectors">
            <div class="mb-3">
              <label class="form-label">Category Field</label>
              <select id="categoryField" class="form-select"></select>
            </div>
            <div class="mb-3">
              <label class="form-label">Value Field</label>
              <select id="valueField" class="form-select"></select>
            </div>
          </div>
          <div id="mapSelectors" class="d-none">
            <div class="mb-3">
              <label class="form-label">Latitude Field</label>
              <select id="latField" class="form-select"></select>
            </div>
            <div class="mb-3">
              <label class="form-label">Longitude Field</label>
              <select id="lonField" class="form-select"></select>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button class="btn btn-secondary" type="button" data-bs-dismiss="modal">Cancel</button>
          <button class="btn btn-primary" type="submit">Save</button>
        </div>
      </form>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.amcharts.com/lib/5/index.js"></script>
<script src="https://cdn.amcharts.com/lib/5/xy.js"></script>
<script src="https://cdn.amcharts.com/lib/5/percent.js"></script>
<script src="https://cdn.amcharts.com/lib/5/map.js"></script>
<script src="https://cdn.amcharts.com/lib/5/geodata/worldLow.js"></script>
<script src="https://cdn.amcharts.com/lib/5/themes/Animated.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    const signupSelect = document.getElementById('signupRange');
         
  
  let signupRoot;



//  async function loadSignupChart(range) {
//   const res = await fetch('/admin/chart/Newsignups'); // should return [{ date:"2025-08-18", count:3 }, ...]
//   const raw = await res.json();

//   // Map YYYY-MM-DD -> epoch ms (midnight UTC). If you need ET, adjust on server or here.
//   const data = (Array.isArray(raw.series) ? raw.series : raw).map(d => ({
//     ts: new Date(d.date + 'T00:00:00Z').getTime(),
//     count: Number(d.count || 0),
//     dateStr: d.date
//   }));

//   if (signupRoot) signupRoot.dispose();

//   const root = am5.Root.new('chart-signups');
//   signupRoot = root;
//   root.setThemes([am5themes_Animated.new(root)]);

//   const chart = root.container.children.push(am5xy.XYChart.new(root, {
//     layout: root.verticalLayout,
//     panX: true, panY: false, wheelX: "panX", wheelY: "zoomX"
//   }));

//   const xAxis = chart.xAxes.push(am5xy.DateAxis.new(root, {
//     baseInterval: { timeUnit: "day", count: 1 }, // <-- "day"
//     renderer: am5xy.AxisRendererX.new(root, { minGridDistance: 40 }),
//     tooltip: am5.Tooltip.new(root, {})
//   }));

//   const yAxis = chart.yAxes.push(am5xy.ValueAxis.new(root, {
//     renderer: am5xy.AxisRendererY.new(root, {})
//   }));

//   const series = chart.series.push(am5xy.LineSeries.new(root, {
//     name: "Sign-ups",
//     xAxis, yAxis,
//     valueXField: "ts",      // <-- numeric timestamp
//     valueYField: "count",
//     tooltip: am5.Tooltip.new(root, { labelText: "{valueY}" })
//   }));
//   series.strokes.template.setAll({ strokeWidth: 2 });

//   chart.set("cursor", am5xy.XYCursor.new(root, { xAxis }));
//   chart.set("scrollbarX", am5.Scrollbar.new(root, { orientation: "horizontal" }));

//   // IMPORTANT: set data on the series (not the xAxis)
//   series.data.setAll(data);

//   // Optional: zoom to full range
//   if (data.length) {
//     xAxis.zoomToValues(data[0].ts, data[data.length - 1].ts);
//   }
// }
  

  // document.getElementById('chart-signups').addEventListener('click', async () => {
  //   const res = await fetch('/admin/chart/Newsignups'); // should return [{ date:"2025-08-18", count:3 }, ...]
  //   const raw = await res.json();
  //    const data = (Array.isArray(raw.series) ? raw.series : raw).map(d => ({
  //           ts: new Date(d.date + 'T00:00:00Z').getTime(),
  //           count: Number(d.count || 0),
  //           dateStr: d.date
  //         }));
  //   let popupRoot;
  //   Swal.fire({
  //     title: 'Pre-Registrations Per Day',
  //     html: '<div id="signupChartPopup" style="width:100%;height:400px;"></div>',
  //     width: '90%',
  //     didOpen: () => {
  //       popupRoot = am5.Root.new('signupChartPopup');
  //       popupRoot.setThemes([am5themes_Animated.new(popupRoot)]);

  //         const chart = popupRoot.container.children.push(am5xy.XYChart.new(popupRoot, {
  //           layout: popupRoot.verticalLayout,
  //           panX: true, panY: false, wheelX: "panX", wheelY: "zoomX"
  //         }));

  //         const xAxis = chart.xAxes.push(am5xy.DateAxis.new(popupRoot, {
  //           baseInterval: { timeUnit: "day", count: 1 }, // <-- "day"
  //           renderer: am5xy.AxisRendererX.new(popupRoot, { minGridDistance: 40 }),
  //           tooltip: am5.Tooltip.new(popupRoot, {})
  //         }));

  //         const yAxis = chart.yAxes.push(am5xy.ValueAxis.new(popupRoot, {
  //           renderer: am5xy.AxisRendererY.new(popupRoot, {})
  //         }));

  //         const series = chart.series.push(am5xy.LineSeries.new(popupRoot, {
  //           name: "Sign-ups",
  //           xAxis, yAxis,
  //           valueXField: "ts",      // <-- numeric timestamp
  //           valueYField: "count",
  //           tooltip: am5.Tooltip.new(popupRoot, { labelText: "{valueY}" })
  //         }));
  //         series.strokes.template.setAll({ strokeWidth: 2 });

  //         chart.set("cursor", am5xy.XYCursor.new(popupRoot, { xAxis }));
  //         chart.set("scrollbarX", am5.Scrollbar.new(popupRoot, { orientation: "horizontal" }));

  //         // IMPORTANT: set data on the series (not the xAxis)
  //         series.data.setAll(data);

  //         // Optional: zoom to full range
  //         if (data.length) {
  //           xAxis.zoomToValues(data[0].ts, data[data.length - 1].ts);
  //         }
  //     },
  //     willClose: () => {
  //       if (popupRoot) popupRoot.dispose();
  //     }
  //   });
  // });
  /////////////////////////////////********************************************************************//////////
    /////////////////////////////////********************************************************************//////////
      /////////////////////////////////********************************************************************//////////
        /////////////////////////////////********************************************************************//////////
 signupSelect.addEventListener('change', () => loadSignupPieChart(signupSelect.value));
  loadSignupPieChart('week');

  async function loadSignupPieChart(range) {
  // You can pass a range if your route supports it
  const res = await fetch('/admin/chart/Newsignups');
  const raw = await res.json();
  const rows = Array.isArray(raw.series) ? raw.series : raw; // [{date:"YYYY-MM-DD", count:N}, ...]

  // Map to pie format; optionally drop zero-count days so the chart isnâ€™t cluttered
  const pieData = rows
    .map(d => ({
      label: d.date,                      // e.g., "2025-08-18"
      value: Number(d.count || 0)
    }))
    .filter(d => d.value > 0);            // remove zeros (optional)

  // If thereâ€™s nothing to show, clear and exit gracefully
  if (signupRoot) signupRoot.dispose();
  const root = am5.Root.new('chart-signups');
  signupRoot = root;
  root.setThemes([ am5themes_Animated.new(root) ]);

  const chart = root.container.children.push(
    am5percent.PieChart.new(root, {
      layout: root.verticalLayout,
      innerRadius: am5.percent(50)        // donut look
    })
  );

  const series = chart.series.push(
    am5percent.PieSeries.new(root, {
      name: "Sign-ups per day",
      categoryField: "label",
      valueField: "value",
      alignLabels: true
    })
  );

  series.slices.template.setAll({
    tooltipText: "{category}: {value} ({valuePercentTotal.formatNumber('0.0')}%)"
  });
  series.labels.template.setAll({ text: "{category}\n{value}" });

  series.data.setAll(pieData);

  // Legend
  const legend = chart.children.push(
    am5.Legend.new(root, {
      centerX: am5.percent(50),
      x: am5.percent(50),
      layout: root.verticalLayout
    })
  );
  legend.data.setAll(series.dataItems);
}

// hook up your selector if you have one
//signupSelect.addEventListener('change', () => loadSignupChart(signupSelect.value));
//loadSignupChart('week');

// --- Popup: also show a pie ---
document.getElementById('chart-signups').addEventListener('click', async () => {
  const res = await fetch('/admin/chart/Newsignups');
  const raw = await res.json();
  const rows = Array.isArray(raw.series) ? raw.series : raw;
  const pieData = rows.map(d => ({ label: d.date, value: Number(d.count || 0) })).filter(d => d.value > 0);

  let popupRoot;
  Swal.fire({
    title: 'Pre-Registrations Per Day',
    html: '<div id="signupChartPopup" style="width:100%;height:400px;"></div>',
    width: '90%',
    didOpen: () => {
      popupRoot = am5.Root.new('signupChartPopup');
      popupRoot.setThemes([ am5themes_Animated.new(popupRoot) ]);

      const chart = popupRoot.container.children.push(
        am5percent.PieChart.new(popupRoot, {
          layout: popupRoot.verticalLayout,
          innerRadius: am5.percent(50)
        })
      );

      const series = chart.series.push(
        am5percent.PieSeries.new(popupRoot, {
          name: "Sign-ups per day",
          categoryField: "label",
          valueField: "value",
          alignLabels: true
        })
      );

      series.slices.template.setAll({
        tooltipText: "{category}: {value} ({valuePercentTotal.formatNumber('0.0')}%)"
      });
      series.labels.template.setAll({ text: "{category}\n{value}" });

      series.data.setAll(pieData);

      const legend = chart.children.push(
        am5.Legend.new(popupRoot, { centerX: am5.percent(50), x: am5.percent(50), layout: popupRoot.verticalLayout })
      );
      legend.data.setAll(series.dataItems);
    },
    willClose: () => {
      if (popupRoot) popupRoot.dispose();
    }
  });
});
  /////////////////////////////////********************************************************************//////////
    /////////////////////////////////********************************************************************//////////
      /////////////////////////////////********************************************************************//////////

       /////////////////////////////////********************************************************************//////////
    /////////////////////////////////********************************************************************//////////
      /////////////////////////////////************************Chart 2*************************//////////
        /////////////////////////////////********************************************************************//////////
 //signupSelect2.addEventListener('change', () => loadSignupPieChart(signupSelect2.value));
  loadSignupPieChart2('week');

  async function loadSignupPieChart2(range) {
  // You can pass a range if your route supports it
  const res = await fetch('/admin/chart/Newsignups');
  const raw = await res.json();
  const rows = Array.isArray(raw.series) ? raw.series : raw; // [{date:"YYYY-MM-DD", count:N}, ...]

  // Map to pie format; optionally drop zero-count days so the chart isnâ€™t cluttered
  const pieData = rows
    .map(d => ({
      label: d.date,                      // e.g., "2025-08-18"
      value: Number(d.count || 0)
    }))
    .filter(d => d.value > 0);            // remove zeros (optional)

  // If thereâ€™s nothing to show, clear and exit gracefully
  if (signupRoot) signupRoot.dispose();
  const root = am5.Root.new('chart-signups2');
  signupRoot = root;
  root.setThemes([ am5themes_Animated.new(root) ]);

  const chart = root.container.children.push(
    am5percent.PieChart.new(root, {
      layout: root.verticalLayout,
      innerRadius: am5.percent(50)        // donut look
    })
  );

  const series = chart.series.push(
    am5percent.PieSeries.new(root, {
      name: "Sign-ups per day",
      categoryField: "label",
      valueField: "value",
      alignLabels: true
    })
  );

  series.slices.template.setAll({
    tooltipText: "{category}: {value} ({valuePercentTotal.formatNumber('0.0')}%)"
  });
  series.labels.template.setAll({ text: "{category}\n{value}" });

  series.data.setAll(pieData);

  // Legend
  const legend = chart.children.push(
    am5.Legend.new(root, {
      centerX: am5.percent(50),
      x: am5.percent(50),
      layout: root.verticalLayout
    })
  );
  legend.data.setAll(series.dataItems);
}

// hook up your selector if you have one
//signupSelect.addEventListener('change', () => loadSignupChart(signupSelect.value));
//loadSignupChart('week');

// --- Popup: also show a pie ---
document.getElementById('chart-signups2').addEventListener('click', async () => {
  const res = await fetch('/admin/chart/Newsignups');
  const raw = await res.json();
  const rows = Array.isArray(raw.series) ? raw.series : raw;
  const pieData = rows.map(d => ({ label: d.date, value: Number(d.count || 0) })).filter(d => d.value > 0);

  let popupRoot;
  Swal.fire({
    title: 'Pre-Registrations Per Day',
    html: '<div id="signupChartPopup" style="width:100%;height:400px;"></div>',
    width: '90%',
    didOpen: () => {
      popupRoot = am5.Root.new('signupChartPopup2');
      popupRoot.setThemes([ am5themes_Animated.new(popupRoot) ]);

      const chart = popupRoot.container.children.push(
        am5percent.PieChart.new(popupRoot, {
          layout: popupRoot.verticalLayout,
          innerRadius: am5.percent(50)
        })
      );

      const series = chart.series.push(
        am5percent.PieSeries.new(popupRoot, {
          name: "Sign-ups per day",
          categoryField: "label",
          valueField: "value",
          alignLabels: true
        })
      );

      series.slices.template.setAll({
        tooltipText: "{category}: {value} ({valuePercentTotal.formatNumber('0.0')}%)"
      });
      series.labels.template.setAll({ text: "{category}\n{value}" });

      series.data.setAll(pieData);

      const legend = chart.children.push(
        am5.Legend.new(popupRoot, { centerX: am5.percent(50), x: am5.percent(50), layout: popupRoot.verticalLayout })
      );
      legend.data.setAll(series.dataItems);
    },
    willClose: () => {
      if (popupRoot) popupRoot.dispose();
    }
  });
});
  /////////////////////////////////********************************************************************//////////
    /////////////////////////////////********************************************************************//////////
      /////////////////////////////////********************************************************************//////////
  const chartData = {

    "chart-class-size": <%- JSON.stringify(classSizes.map(c => ({ category: c.name, value: c.size }))) %>,
    "chart-pending": [{ category: "Pending", value: <%= pendingCount %> }],
    "chart-approved": [{ category: "Approved", value: <%= approvedCount %> }]
  };

  const chartDefaults = {
    "chart-class-size": "bar",
    "chart-pending": "bar",
    "chart-approved": "bar"
  };

  const roots = {};
  let metaTables = {};
  const modal = new bootstrap.Modal(document.getElementById('chartModal'));
  const form = document.getElementById('chartForm');
  const tableSelect = document.getElementById('dataTable');
  const categorySelect = document.getElementById('categoryField');
  const valueSelect = document.getElementById('valueField');
  const latSelect = document.getElementById('latField');
  const lonSelect = document.getElementById('lonField');
  const typeSelect = document.getElementById('chartType');
  const fieldSelectors = document.getElementById('fieldSelectors');
  const mapSelectors = document.getElementById('mapSelectors');

  async function loadMeta() {
    if (Object.keys(metaTables).length) return;
    const res = await fetch('/admin/chart/meta');
    const data = await res.json();
    metaTables = data.tables || {};
  }

  function populateTables() {
    tableSelect.innerHTML = '<option value="">Select table</option>';
    Object.keys(metaTables).forEach(t => {
      const opt = document.createElement('option');
      opt.value = t; opt.textContent = t; tableSelect.appendChild(opt);
    });
  }

  tableSelect.addEventListener('change', () => {
    const cols = metaTables[tableSelect.value] || [];
    [categorySelect, valueSelect, latSelect, lonSelect].forEach(sel => {
      sel.innerHTML = '';
      cols.forEach(c => {
        const opt = document.createElement('option');
        opt.value = c; opt.textContent = c; sel.appendChild(opt);
      });
    });
  });

  typeSelect.addEventListener('change', () => {
    const isMap = typeSelect.value === 'map';
    fieldSelectors.classList.toggle('d-none', isMap);
    mapSelectors.classList.toggle('d-none', !isMap);
  });

  document.querySelectorAll('.chart-edit').forEach(btn => {
    btn.addEventListener('click', async () => {
      await loadMeta();
      populateTables();
      const card = btn.closest('.chart-card');
      const id = card.querySelector('.chart-container').id;
      document.getElementById('chartId').value = id;
      const config = JSON.parse(localStorage.getItem('chartConfig:' + id) || '{}');
      typeSelect.value = config.type || chartDefaults[id];
      tableSelect.value = config.table || '';
      tableSelect.dispatchEvent(new Event('change'));
      categorySelect.value = config.category || '';
      valueSelect.value = config.value || '';
      latSelect.value = config.lat || '';
      lonSelect.value = config.lon || '';
      typeSelect.dispatchEvent(new Event('change'));
      modal.show();
    });
  });

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    const id = document.getElementById('chartId').value;
    const config = {
      type: typeSelect.value,
      table: tableSelect.value,
      category: categorySelect.value,
      value: valueSelect.value,
      lat: latSelect.value,
      lon: lonSelect.value
    };
    localStorage.setItem('chartConfig:' + id, JSON.stringify(config));
    modal.hide();
    renderChart(id, config);
  });

  async function fetchData(config, id) {
    if (config.table) {
      const params = new URLSearchParams(config);
      const res = await fetch('/admin/chart/data?' + params.toString());
      return res.json();
    }
    return chartData[id];
  }

  async function renderChart(id, config) {
    const data = await fetchData(config, id);
    if (roots[id]) roots[id].dispose();
    const root = am5.Root.new(id);
    roots[id] = root;
    root.setThemes([am5themes_Animated.new(root)]);
    let chart, series;
    switch(config.type) {
      case 'pie':
        chart = root.container.children.push(am5percent.PieChart.new(root, {}));
        series = chart.series.push(am5percent.PieSeries.new(root, { valueField:'value', categoryField:'category' }));
        series.data.setAll(data);
        break;
      case 'line':
        chart = root.container.children.push(am5xy.XYChart.new(root, {}));
        const lx = chart.xAxes.push(am5xy.CategoryAxis.new(root, { categoryField:'category' }));
        const ly = chart.yAxes.push(am5xy.ValueAxis.new(root, { min:0 }));
        series = chart.series.push(am5xy.LineSeries.new(root, { xAxis: lx, yAxis: ly, valueYField:'value', categoryXField:'category' }));
        lx.data.setAll(data); series.data.setAll(data);
        break;
      case 'bar':
        chart = root.container.children.push(am5xy.XYChart.new(root, { paddingLeft:0, paddingRight:0 }));
        const bx = chart.xAxes.push(am5xy.CategoryAxis.new(root, { categoryField:'category', renderer: am5xy.AxisRendererX.new(root, {}) }));
        const by = chart.yAxes.push(am5xy.ValueAxis.new(root, { min:0 }));
        series = chart.series.push(am5xy.ColumnSeries.new(root, { xAxis: bx, yAxis: by, valueYField:'value', categoryXField:'category' }));
        bx.data.setAll(data); series.data.setAll(data);
        break;
      case 'realtime':
        chart = root.container.children.push(am5xy.XYChart.new(root, {}));
        const rx = chart.xAxes.push(am5xy.CategoryAxis.new(root, { categoryField:'category' }));
        const ry = chart.yAxes.push(am5xy.ValueAxis.new(root, { min:0 }));
        series = chart.series.push(am5xy.ColumnSeries.new(root, { xAxis: rx, yAxis: ry, valueYField:'value', categoryXField:'category', sequencedInterpolation:true }));
        rx.data.setAll(data); series.data.setAll(data);
        series.events.on('datavalidated', () => {
          series.dataItems.sort((a,b) => b.get('valueY') - a.get('valueY'));
          series.dataItems.forEach((di,i) => di.set('index', i));
        });
        break;
      case 'cylinder3d':
        chart = root.container.children.push(am5xy.XYChart.new(root, {}));
        const cx = chart.xAxes.push(am5xy.CategoryAxis.new(root, { categoryField:'category' }));
        const cy = chart.yAxes.push(am5xy.ValueAxis.new(root, { min:0 }));
        series = chart.series.push(am5xy.CylinderColumnSeries.new(root, { xAxis: cx, yAxis: cy, valueYField:'value', categoryXField:'category' }));
        cx.data.setAll(data); series.data.setAll(data);
        break;
      case 'pie3d':
        chart = root.container.children.push(am5percent.PieChart.new(root, { innerRadius: am5.percent(40) }));
        series = chart.series.push(am5percent.PieSeries.new(root, { valueField:'value', categoryField:'category' }));
        series.slices.template.setAll({ depth: 10, cornerRadius:5 });
        series.data.setAll(data);
        break;
      case 'map':
        chart = root.container.children.push(am5map.MapChart.new(root, { projection: am5map.geoMercator() }));
        chart.series.push(am5map.MapPolygonSeries.new(root, { geoJSON: am5geodata_worldLow }));
        const pointSeries = chart.series.push(am5map.MapPointSeries.new(root, {}));
        pointSeries.bullets.push(() => am5.Bullet.new(root, { sprite: am5.Circle.new(root, { radius:4, fill: root.interfaceColors.get('alternativeBackground') }) }));
        pointSeries.data.setAll(data.map(d => ({ latitude: d.latitude, longitude: d.longitude, title: d.category })));
        break;
      case 'pictorial':
        chart = root.container.children.push(am5xy.SlicedChart.new(root, {}));
        series = chart.series.push(am5xy.PictorialStackedSeries.new(root, { valueField:'value', categoryField:'category', orientation:'vertical', svgPath:"M0,0L100,0 100,100 0,100Z" }));
        series.data.setAll(data);
        break;
      default:
        alert('Selected chart type not implemented.');
    }
  }

  Object.keys(chartData).forEach(id => {
    const config = JSON.parse(localStorage.getItem('chartConfig:' + id) || '{}');
    config.type = config.type || chartDefaults[id];
    renderChart(id, config);
  });
</script>
</body>
</html>